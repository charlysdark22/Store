const mongoose = require('mongoose');

const couponSchema = new mongoose.Schema({
  code: {
    type: String,
    required: true,
    unique: true,
    uppercase: true,
    trim: true,
    minlength: 3,
    maxlength: 20
  },
  name: {
    es: { type: String, required: true },
    en: { type: String, required: true },
    fr: { type: String }
  },
  description: {
    es: { type: String, required: true },
    en: { type: String, required: true },
    fr: { type: String }
  },
  type: {
    type: String,
    enum: ['percentage', 'fixed', 'shipping', 'bogo'],
    required: true
  },
  value: {
    type: Number,
    required: true,
    min: 0
  },
  minimumAmount: {
    type: Number,
    default: 0,
    min: 0
  },
  maximumDiscount: {
    type: Number,
    min: 0
  },
  usageLimit: {
    total: {
      type: Number,
      min: 1
    },
    perUser: {
      type: Number,
      default: 1,
      min: 1
    }
  },
  usedCount: {
    type: Number,
    default: 0,
    min: 0
  },
  validFrom: {
    type: Date,
    default: Date.now
  },
  validUntil: {
    type: Date,
    required: true
  },
  applicableProducts: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product'
  }],
  applicableCategories: [{
    type: String,
    enum: ['desktop', 'laptop', 'phone', 'accessories']
  }],
  excludedProducts: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product'
  }],
  userRestrictions: {
    newUsersOnly: {
      type: Boolean,
      default: false
    },
    minOrdersCount: {
      type: Number,
      default: 0
    },
    userTiers: [{
      type: String,
      enum: ['bronze', 'silver', 'gold', 'platinum']
    }]
  },
  isActive: {
    type: Boolean,
    default: true
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  usageHistory: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    order: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Order'
    },
    discountAmount: Number,
    usedAt: {
      type: Date,
      default: Date.now
    }
  }],
  autoGenerated: {
    type: Boolean,
    default: false
  },
  tags: [String]
}, {
  timestamps: true
});

// Índices para optimizar búsquedas
couponSchema.index({ code: 1 });
couponSchema.index({ validFrom: 1, validUntil: 1 });
couponSchema.index({ isActive: 1 });
couponSchema.index({ createdBy: 1 });

// Middleware para validar fechas
couponSchema.pre('save', function(next) {
  if (this.validUntil <= this.validFrom) {
    next(new Error('La fecha de vencimiento debe ser posterior a la fecha de inicio'));
  }
  next();
});

// Método para verificar si el cupón es válido
couponSchema.methods.isValid = function() {
  const now = new Date();
  return (
    this.isActive &&
    this.validFrom <= now &&
    this.validUntil >= now &&
    (!this.usageLimit.total || this.usedCount < this.usageLimit.total)
  );
};

// Método para verificar si un usuario puede usar el cupón
couponSchema.methods.canUserUse = async function(userId) {
  if (!this.isValid()) return false;

  // Verificar uso por usuario
  const userUsageCount = this.usageHistory.filter(
    usage => usage.user.toString() === userId.toString()
  ).length;

  if (userUsageCount >= this.usageLimit.perUser) {
    return false;
  }

  // Verificar restricciones de usuario si existen
  if (this.userRestrictions.newUsersOnly || 
      this.userRestrictions.minOrdersCount > 0 || 
      this.userRestrictions.userTiers.length > 0) {
    
    const User = mongoose.model('User');
    const Order = mongoose.model('Order');
    
    const user = await User.findById(userId);
    if (!user) return false;

    // Solo usuarios nuevos
    if (this.userRestrictions.newUsersOnly) {
      const userOrdersCount = await Order.countDocuments({ user: userId });
      if (userOrdersCount > 0) return false;
    }

    // Mínimo de pedidos
    if (this.userRestrictions.minOrdersCount > 0) {
      const userOrdersCount = await Order.countDocuments({ 
        user: userId, 
        status: 'delivered' 
      });
      if (userOrdersCount < this.userRestrictions.minOrdersCount) return false;
    }

    // Tier de usuario
    if (this.userRestrictions.userTiers.length > 0) {
      if (!this.userRestrictions.userTiers.includes(user.tier)) return false;
    }
  }

  return true;
};

// Método para calcular descuento
couponSchema.methods.calculateDiscount = function(cart) {
  if (!this.isValid()) return 0;

  let applicableAmount = 0;
  let applicableItems = [];

  // Filtrar productos aplicables
  for (const item of cart.items) {
    let isApplicable = true;

    // Verificar productos excluidos
    if (this.excludedProducts.length > 0) {
      if (this.excludedProducts.some(id => id.toString() === item.product._id.toString())) {
        isApplicable = false;
      }
    }

    // Verificar productos específicos
    if (this.applicableProducts.length > 0) {
      if (!this.applicableProducts.some(id => id.toString() === item.product._id.toString())) {
        isApplicable = false;
      }
    }

    // Verificar categorías
    if (this.applicableCategories.length > 0) {
      if (!this.applicableCategories.includes(item.product.category)) {
        isApplicable = false;
      }
    }

    if (isApplicable) {
      const itemTotal = item.product.price * item.quantity;
      applicableAmount += itemTotal;
      applicableItems.push(item);
    }
  }

  // Verificar monto mínimo
  if (applicableAmount < this.minimumAmount) {
    return 0;
  }

  let discount = 0;

  switch (this.type) {
    case 'percentage':
      discount = applicableAmount * (this.value / 100);
      break;
    case 'fixed':
      discount = Math.min(this.value, applicableAmount);
      break;
    case 'shipping':
      discount = Math.min(this.value, cart.shipping || 0);
      break;
    case 'bogo':
      // Buy One Get One - implementación básica
      const cheapestItem = applicableItems
        .sort((a, b) => a.product.price - b.product.price)[0];
      if (cheapestItem && applicableItems.length >= 2) {
        discount = cheapestItem.product.price;
      }
      break;
  }

  // Aplicar descuento máximo si está definido
  if (this.maximumDiscount && discount > this.maximumDiscount) {
    discount = this.maximumDiscount;
  }

  return Math.round(discount * 100) / 100; // Redondear a 2 decimales
};

// Método para usar el cupón
couponSchema.methods.use = function(userId, orderId, discountAmount) {
  this.usedCount += 1;
  this.usageHistory.push({
    user: userId,
    order: orderId,
    discountAmount,
    usedAt: new Date()
  });
  return this.save();
};

// Método estático para generar código único
couponSchema.statics.generateUniqueCode = async function(prefix = '') {
  let code;
  let exists = true;
  
  while (exists) {
    const randomString = Math.random().toString(36).substr(2, 8).toUpperCase();
    code = prefix ? `${prefix}${randomString}` : randomString;
    exists = await this.findOne({ code });
  }
  
  return code;
};

// Método estático para crear cupón de bienvenida
couponSchema.statics.createWelcomeCoupon = async function(userId) {
  const code = await this.generateUniqueCode('WELCOME');
  
  return this.create({
    code,
    name: {
      es: 'Bienvenido a Tech Store',
      en: 'Welcome to Tech Store',
      fr: 'Bienvenue à Tech Store'
    },
    description: {
      es: 'Descuento especial para nuevos usuarios',
      en: 'Special discount for new users',
      fr: 'Remise spéciale pour nouveaux utilisateurs'
    },
    type: 'percentage',
    value: 10,
    minimumAmount: 500,
    usageLimit: {
      total: 1,
      perUser: 1
    },
    validFrom: new Date(),
    validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 días
    userRestrictions: {
      newUsersOnly: true
    },
    isActive: true,
    createdBy: userId,
    autoGenerated: true,
    tags: ['welcome', 'new-user']
  });
};

// Método estático para crear cupón de cumpleaños
couponSchema.statics.createBirthdayCoupon = async function(userId) {
  const code = await this.generateUniqueCode('BIRTHDAY');
  
  return this.create({
    code,
    name: {
      es: 'Feliz Cumpleaños',
      en: 'Happy Birthday',
      fr: 'Joyeux Anniversaire'
    },
    description: {
      es: '¡Feliz cumpleaños! Disfruta tu descuento especial',
      en: 'Happy Birthday! Enjoy your special discount',
      fr: 'Joyeux anniversaire! Profitez de votre remise spéciale'
    },
    type: 'percentage',
    value: 15,
    minimumAmount: 300,
    usageLimit: {
      total: 1,
      perUser: 1
    },
    validFrom: new Date(),
    validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 días
    isActive: true,
    createdBy: userId,
    autoGenerated: true,
    tags: ['birthday', 'special']
  });
};

module.exports = mongoose.model('Coupon', couponSchema);